#!/usr/bin/perl
# $Id: segmenter,v 4.3 2000/01/25 17:31:48 min Exp $ / Min-Yen Kan
#
#	Segments based on termer output (munged or not by clusterer), 
#	doesn't matter
#
#	RCS: $Id: segmenter,v 4.3 2000/01/25 17:31:48 min Exp $
#
#	RCS: $Log: segmenter,v $
#	RCS: Revision 4.3  2000/01/25 17:31:48  min
#	RCS: Updated for perl5: updated dbmopen -> tie, $0 -> $progname.
#	RCS:
#	RCS: Revision 4.2  2000/01/25 03:32:09  min
#	RCS: Grabbed source of s2 in /home/min/ab/workingSeg/s2 to replace this code.
#	RCS:
#	RCS: Revision 4.1  2000/01/24 01:38:36  min
#	RCS: changed source control to RCS.
#	RCS:
#	RCS: Revision 4.0  2000/01/24 01:37:07  min
#	RCS: REVISION 3.2.stripped (Sun Jun 28 15:50:15 EDT 1998)
#	RCS: REV: added license calls().  Stripped version takes out evaluation
#	RCS: REV: subsystem
#	RCS: REVISION 3.1 (Fri May 16 16:17:46 EDT 1997)
#	RCS: REV: but added -o option to write out a segment file to be
#	RCS: REV: utilitized by the display utility to write out a hierarchical
#	RCS: REV: segmentation file
#	RCS: REVISION 3.0 (Fri May 9 16:19:44 EDT 1997)
#	RCS: REV: revised to take arbitrary starred terms and use param file to
#	RCS: REV: determine grading method
#	RCS: REVISION 2.1 (Mon Mar 24 13:14:44 EST 1997)
#	RCS: REV: got rid of unneeded &Pow function, since perl has ** operator
#	RCS: REVISION 2.0 (Fri Mar 21 22:34:05 EST 1997)
#	RCS: REV: grader is SOOO buggy.  Tossing, to rewrite it, ugh!
#	RCS: REV: alright! it's fixed!!!
#	RCS:
#
require 5.0;
use DB_File;
use Getopt::Std;
require "flush.pl";

### USER customizable section
$installDir = "/root/work/Experiments/naacl00/bin/Segmenter1.6";
$paramFile = "$installDir/lib/normal.prm";
$userSegDB = "$installDir/lib/userSegment.new.db"; 
$ausDB = "$installDir/lib/averageUserSegment.new.db"; 

# threshold of consensus to be considered correct
$avgThreshold = '0.5';

$tmpfile .= $0; $tmpfile =~ s/[\.\/]//g; $tmpfile = "/tmp/" . $tmpfile . $$ . time;
$0 =~ /([^\/]+)$/; $progname = $1;
### END user customizable section

### HELP Sub-procedure
sub Help {	
    print STDERR "usage: $progname -h\t\t\t\t[invokes help]\n";	
    print STDERR "       $progname -v\t\t\t\t[invokes version]\n";	
    print STDERR "	 $progname [-l bound] [-di] [-o filename] <termer file>\n";
    print STDERR "\n";
    print STDERR "Options:\n";
    print STDERR "\t-d\tdebug mode (verbose output)\n";
    print STDERR "\t-n\tinclude normalized boundaries in output\n";
    print STDERR "\t-p\tuse a different parameter file\n";
    print STDERR "\t-o\toutput segmentation description file\n";
    print STDERR "\t-w\twrite segmentation into database (implies -o)\n";
    print STDERR "\n";
}

### Ctrl-C handler
sub quitHandler {
    print STDERR "\n# $progname fatal - received a 'SIGINT'\n# $progname - exiting cleanly\n";
    exit;
}

### VERSION Sub-procedure
sub Version {
    open (IF, $progname);
    while (<IF>) {
	if (/^\#/) { 
	    if (/^\#\!/) { next; } else { s/^\#//; print STDERR $_; }
	} else { last; }
    }
}

### print LICENSE
sub License {
    print STDERR "Copyright \251 1998,2000 by The Trustees of Columbia University in the City of\n";
    print STDERR "New York.  All rights reserved.  This software is being provided at no cost\n";
    print STDERR "for educational and/or research purposes only.\n";
}

###
### MAIN program
###

$SIG{'INT'} = 'quitHandler';
getopts ('U:dhqp:onvw');

if ($opt_v) { &Version; exit(0); }				      # call Version, if asked for
if ($opt_h) { &Help; exit (0); }				      # call help, if asked for
if (!$opt_q) { &License; }					      # shut up, if asked for
if ($opt_p) { $paramFile = $opt_p; }
if ($opt_w) { $opt_o = 1; }

## standardize input stream (either STDIN on first arg on command line)
if ($filename = shift) {
  NEWFILE:
    if (!(-e $filename)) { die "$progname crash\t\tFile $filename doesn't exist"; }
    open (IF, "$filename") || die "$progname crash\t\tCan't open \"$filename\"";
    $fh = "IF";
} else {
    $filename = "<STDIN>";
    $fh = "STDIN";
}

# START read in parameter file
open (IF2, $paramFile) || 
    die "# $progname - can't open parameter File $paramFile - aborting!";

$i = 0;
while (<IF2>) {
    if ($_ !~ /^\#/ && $_ !~ /^\s*$/) { 
	$typeTitle[$i] = $_; chop $typeTitle[$i];
	$befScore[$i] = <IF2>; chop $befScore[$i];
	$aftScore[$i] = <IF2>; chop $aftScore[$i];
	$intScore[$i] = <IF2>; chop $intScore[$i];
	$spread[$i] = <IF2>; chop $spread[$i];
	$lowBound[$i] = <IF2>; chop $lowBound[$i];
	$dropIsol[$i] = <IF2>; chop $dropIsol[$i];
	$i++;
    }
}
close (IF2);
# END read in parameter file

# START read in term file
while (<$fh>) {
    if (/^\# Filename: (.+)/) { $name = $1; print; next; }
    if (/^\# Length: (\d+)/) { $length = $1; next; }
    if (/^\# Paragraph beginnings are located at sentences (.+)/) {
	@para = split (/ /,$1);
	next; 
    }
    if (/^(\d+)/) { 
	$sum += $1; 
	/\t([^\(\t]+)\(([\dOSP \|]+)\)/;
	$term = $1; chop $term;
	$occurence = $2;

	$term =~ /(\**)$/;
	if ($maxType < length ($1)) { $maxType = length ($1); }
	$term{$term} = $occurence;
    }
}
# END read in term file

print STDOUT "# Length: $length\n";

$seenArrRef = \@seen;
$borderArrRef = \@border;
$paraNumArrRef = \@paraNumLine;
$sentNumArrRef = \@sentNumLine;

# establish another way of checking paragraph boundaries
for ($i = 0; $i <= $#para; $i++) {
    $paraline[$para[$i]] = 1;
}

# define paragraph and sentence display lines
for ($i = 0, $j = 0; $i <= $length; $i++) {
    if (defined $paraline[$i]) {
	$j++;
	$paraNumLine[$i] = $j;
    }
    $sentNumLine[$i] = $i;
}

for ($termCount = 0, $terms = 0; $termCount <= $maxType; $termCount++) {
    $ocurArrRef = \@occur;
    $spread = eval ($spread[$termCount]);
    if ($opt_d && $spread >= 0) { print "\n# $typeTitle[$termCount]\n"; }

    foreach $key (keys %term) {
	$key =~ /([^\*]+)(\**)$/;
	$canonical = $1;
	if (length ($2) != $termCount) { next; }

	@temp = split (/ (\| )?/,$term{$key});
	
	# drop terms that don't occur frequently enough
	if ($#temp + 1 <= eval($lowBound[$termCount])) { next; }
	
	for ($i = 0; $i <= $#temp; $i++) {
	    $occur[$temp[$i]]++;
	}

	# do spreading 
	for ($i = 1; $i <= $length; $i++) {
	    if (($occur[$i] != 0) && ($occur[$i] ne "x")) {
		for ($j = 0; $j <= $spread; $j++) {
		    if (!defined $occur[$i + $j]) {
			$occur[$i + $j] = "x"; 
		    }
		    if (!defined $occur[$i - $j]) {
			$occur[$i - $j] = "x"; 
		    }
		}
	    }
	}
    
	# get rid of left x's not enclosed
	for ($i = 1; $i <= $length; $i++) {
	    if (($occur[$i] eq "x") && 
		((!defined $occur[$i-1]) || ($i - 1 == 0))) {
		undef $occur[$i];
	    }
	}
	
	# get rid of right x's not enclosed
	for ($i = $length; $i > 0; $i--) {
	    if (($occur[$i] eq "x") && 
		((!defined $occur[$i+1]) || ($i == $length))) {
		undef $occur[$i];
	    }
	}

	# drop isolated occurences unless not warranted
	if (eval ($dropIsol[$termCount])) {
	    for ($i = 1; $i <= $length; $i++) {
		if ((defined $occur[$i]) && (!defined $occur[$i+1]) &&
		    (!defined $occur[$i-1])) {
		    undef $occur[$i]; 
		}
	    }
	    if (defined $occur[1] && !defined $occur[2]) { 
		undef $occur[1]; 
	    }
	    if (defined $occur[$length] && !defined $occur[$length-1]) { 
		undef $occur[$length]; 
	    }
	    
	    for ($i = 1, $empty = 1; $i <= $length; $i++) {
		if (defined $occur[$i]) { $empty = 0; last; }
	    }
            # isolated occurence droppings made this term unimportant
	    if ($empty == 1) { next; } 
	}

	## map terms back to paragraphs for segment file theme reporting
	for ($i = 1, $reported = 0, $j = 0; $i <= $length; $i++) {
	    if (defined $paraline[$i]) { $j++; $reported = 0; }
	    if (defined $occur[$i] && $reported == 0) {
		$paraOccur{$key} .= "$j|";
		$reported = 1;
	    }
	}

	## establish summed borders
	for ($i = 1; $i <= $length; $i++) {
	    if (defined $occur[$i]) {
		# determine start, end sentences of cluster and then
		# negative weight the middle
		local ($start) = $i;
		local ($score) = $occur[$i];
		local ($j) = $i;
		while (defined $occur[$j]) { $j++; }
		local ($end) = $j-1;

		## Scoring central region
		for ($j = $start+1; $j <= $end; $j++) { 
		    if (defined $paraline[$j]) { 
			# cohensiveness of cluster depends on relative 
			# proportion of cluster length to article length
			$border[$j] += int(eval($intScore[$termCount]));
			$scoreSum += int(eval($intScore[$termCount]));
		    }
		}
		
		## determine front, back paragraph of cluster and
		## then score the boundaries
		for ($j = $start; 
		     (!defined $paraline[$j] && $j >= 2); $j--) { ; }
		local($paraBefore) = $j;


		if ($j == 1) { undef $paraBefore; }
		
		for ($j = $end+1; 
		     (!defined $paraline[$j] && $j <= $length); $j++) { ; }
		local($paraAfter) = $j;
#	        print "parabefore = $paraBefore start $start end $end paraafter $paraAfter\n";		
		if (defined $paraBefore) {
		    $border[$paraBefore] += int (eval($befScore[$termCount])); 
		    $scoreSum += int(eval($befScore[$termCount]));
		}
		if (defined $paraAfter) {
		    $border[$paraAfter] += int (eval($aftScore[$termCount]));
		    $scoreSum += int(eval($aftScore[$termCount]));
		}

		## Scoring non-term regions
		for ($j = 1; $j < $start; $j++) {
		    if (defined $paraline[$j]) { push (@non,$j); }
		}
		for ($j = $end+1; $j <= $length; $j++) {
		    if (defined $paraline[$j]) { push (@non,$j); }
		}
		
		$thisBorder = $scoreSum/( ($#non) + 2);
		while ($j = shift @non) {
		    $border[$j] -= $thisBorder;
		    $scoreSum -= $thisBorder;
		}

		$scoreSum = 0;
		
		# skip to the next possible area to search for a new cluster
		$i = $end+1;
	    }
	}
	
	$terms++;
	if ($opt_d && $spread >= 0) { 
	    &MultiPrint ($ocurArrRef, "oc-$termCount", $canonical); 
	    &MultiPrint ($borderArrRef, "bord"); 
	}

	for ($i = 1; $i <= $length; $i++) {
	    $occurTerm{$key} .= (defined $occur[$i]) ? $occur[$i] : " ";
	}

	# refresh loop variables
	$count++;
	undef @temp;
	undef @occur;
    }
}

$avps = ($sum/$terms)/$length;
$avpl = $length/($#para + 1);

if (1) {

    print STDOUT "# Number of Terms: $terms\n";
    print STDOUT "# Average terms per sentence: $avps\n";
    print STDOUT "# Average paragraph length: $avpl\n";

    if (!$opt_d) { 
	print "\n\n";
	&MultiPrint($borderArrRef, "bord"); 
    }
	
    if ($opt_n) {
	print "\n";
	# prepare normalized borders (with respect to paragraph length)
	for ($i = $length; $i > 0; $i--) {
	    if (defined $paraline[$i]) { 
		if (defined $border[$i]) {
		    $normBorder[$i] = $border[$i]*10/($sentCount+1);
		}
		$sentCount = 0;
	    } else {
		$sentCount++;
	    }
	}
	
	$normBordArrRef = \@normBorder;
	&MultiPrint($normBordArrRef, "norm");
    }
    
    ## determine segments from border data
    for ($i = 0; $i <= $length; $i++) {
	if (defined $border[$i]) {
	    if ($border[$i] >= 0) { ## positive
		push (@bordOffsets,$i);
		push (@bordScores,$border[$i]);
	    } 
	}
	if (($border[$i] < 0 || $i == $length) && 
	    (defined @bordOffsets)) { 
	    for ($j = 0, $max = -1; $j <= $#bordOffsets; $j++) {
		if ($max < $bordScores[$j]) {
		    $max = $bordScores[$j];
		    $offset = $bordOffsets[$j];
		}
	    }
	    $threshold[$offset] = 1;
	    undef @bordOffsets;
	    undef @bordScores;
	}
    }
    
    print "\n";
    
    # print out paragraph numbers
    &MultiPrint ($paraNumArrRef, "para");
    &MultiPrint ($sentNumArrRef, "sent");
    
    # print out our segmentation
    print "thrs:";
    for ($i = 1,$j = -1; $i <= $length; $i++) {
	if (defined $paraline[$i]) { 
	    $j++; 
	} 
	if (defined $threshold[$i]) {
	    $thresLine .= "$j:";
	    print "1";
	    $numThres++;
	} else {
	    print " ";
	}
    }
    print " | $numThres\n";
}
    
# print the correct segments for comparision
if (1) {
    $numRight = 0;
    tie (%grades, 'DB_File', $ausDB, O_RDWR, 0444, $DB_HASH) || 
	die "# $progname - Can't open database $ausDB";
    
    @pathElements = split (/\//,$name);
    @pathElements2 = split (/\./,$pathElements[$#pathElements]);
    $tag = $pathElements2[0];

    $gradeLine = $grades{$tag};
    while ($gradeLine =~ m/\((\d+),(\d+)\)/g) {
	if ($1 == 0) { $users = $2; }
	else { 
	    if (($users * $avgThreshold) < $2) {
		$corrLine[$para[$1]] = 1; 
	    }
	}
    }
    print "corr:";
    for ($i = 1; $i <= $length; $i++) {
	if (defined $corrLine[$i]) { 
	    print "$corrLine[$i]"; 
	    $numCorr++;
	    if ($threshold[$i] == 1) { $numRight++; }
	} 
	else { print " "; }
    }
    print " | $numCorr ($numRight)\n";

    untie (%grades);
} 

## print out segments file, if asked for
if (defined $opt_o) {
    $of = "STDOUT";
    
    # define variables for segments
    $segSentStart[1] = 1;
    $segParaStart[1] = 1;
    for ($i = 1, $count = 2; $i <= $length; $i++) {
	if (defined $paraNumLine[$i] && defined $threshold[$i]) {
	    $segSentStart[$count] = $i;
	    $segSentEnd[$count-1] = $i-1;
	    $segParaStart[$count] = $paraNumLine[$i];
	    $segParaEnd[$count-1] = $paraNumLine[$i]-1;

	    $count++;
	}
    }
    $segSentEnd[$count-1] = $length;
    $segParaEnd[$count-1] = $#para+1;
    
    $maxNumber = 0; 
    for ($i = 1; $i <= $#segParaEnd; $i++) {
	# find terms that occur in this segment
	foreach $key (keys %paraOccur) {
	    # disqualify pronouns (*) and cue phrases (***)
	    if ($key =~ /(\*+)/) {
		if (length ($1) == 1 || length ($1) == 3) { next; }
	    }
	    
	    # find location of occurence
	    for ($k = $segParaStart[$i]; $k <= $segParaEnd[$i]; $k++) {
		if ($paraOccur{$key} =~ /\b$k\b/) {
		    $segTerm[$i] .= "$key"; # if term occurs in this segment...

		    @paraOccur = split (/[\| ]+/,$paraOccur{$key});

		    for ($l = 0, $flag2 = 0; $l <= $#paraOccur; $l++) {
			if ($paraOccur[$l] < $segParaStart[$i] || $paraOccur[$l] > $segParaEnd[$i]) {
#			    print "$key -> @paraOccur\n";
			    $number[$i] += $#paraOccur;
			    $flag2 = 1;
			    last;
			}
		    }
		    $segTerm[$i] .= ($flag2 == 0) ? "(&)," : ",";
		    last;
		}
	    }
	}

	# find hook segments if any
	if (($i == 1 || $i == $#segParaEnd) && 
	    $segTerm[$i] =~ /\*\*\(\&\)/ && $segTerm[$i] !~ /\*\*\b/ && $segTerm[$i] =~ /\*\*\*\*/) {
	    $segType[$i] = "\[\<B\>Irrelevent Segment\<\/B\>\]";
	} 

	if (!defined $segType[$i] && $maxNumber < $number[$i]) { $maxNumber = $number[$i]; $summarySeg = $i; }
    }
	
    for ($i = 1; $i <= $#segParaEnd; $i++) {
	if (!defined $segType[$i]) {
	    $segType[$i] = ($summarySeg == $i) ? "\[\<B\>Summary Segment\<\/B\>\]" : 
		"\[\<B\>Detail Segment\<\/B\>\]";
	}
	
	print $of "($segTerm[$i] $number[$i] $segType[$i] | $segParaStart[$i]-$segParaEnd[$i])\n";
    }

    for ($i = 1; $i <= $#segEnd; $i++) {
	$segType = ($maxLocation == $i) 
	    ? " \[\<B\>Summary Segment\<\/B\>\]" 
	    : " \[\<B\>Detail Segment\<\/B\>\]";
	chop $segTerm[$i];

	## mini segment stuff
	print $of "($segTerm[$i]$segType $segTermNumber[$i] | $segStart[$i]-$segEnd[$i])\n";
	# find cue phrases within internal segments
	{
	    foreach $key (keys %paraOccur) {
		if ($key !~ /\*\*\*$/) { next; } # if not a cue phrase, skip
		
		@letters = split (//,$occurTerm{$key});
		unshift (@letters, 0); # correct fencepost operation from above split
		
		for ($j = $segStart[$i]; $j <= $segEnd[$i]-1; $j++) { # beware fenceposts!
		    if ($letters[$para[$j]] eq '1') { 
			push (@segCuePhrase, $j+1);
#		    print $of "$key $para[$j] ($letters[0]) [$occurTerm{$key}]!!\n";
		    }
		}
		
	    }
	    
	    if ($#segCuePhrase > -1) {
		push (@segCuePhrase, $segEnd[$i]+1); 
	    }
	
	    $miniStart = $segStart[$i];
	    while ($miniEnd = shift @segCuePhrase) {
		print $of "\t(mini segment | $miniStart-", $miniEnd-1, ")\n";
		$miniStart = $miniEnd;
	    }
	    undef @segCuePhrase;
	}
    }
}

if ($opt_w) {
    tie (%grades, 'DB_File', $userSegDB, O_RDWR, 0444, $DB_HASH) || 
	die "# $progname - Can't open database $ausDB";

    for ($i = 2, undef $val; $i <= $#segParaStart; $i++) {
	$val .= $segParaStart[$i]-1 . ":";
    }
    
    @pathElements =split (/\//,$name);
    ($fname, $ext) = split (/\./,$pathElements[$#pathElements]);
    $key = $fname . ":*$progName";

    $grades{$key} = $val;
    untie (%grades);
}

###
### END of main program
###
sub MultiPrint {
    local ($arrRef,$string,$caption) = @_;
    local ($i, $j, $max, $last) = 0;
    local (@strip);
    local ($neg) = 0;
    for ($i = 1,$max = 0, $last = 0;  $i <= $length; $i++) { 
	if ($$arrRef[$i] < 0) { $neg = 1; }
	$max = (abs($$arrRef[$i]) > $max) ? abs($$arrRef[$i]) : $max;
    }

    local ($units) = length (int($max));
    for ($i = 1; $i <= $length; $i++) {
	for ($j = 1; $j <= $units; $j++) {
	    if (!defined $$arrRef[$i]) { $strip[$j] .= " "; }
	    else { 
		$strip[$j] .= (abs($$arrRef[$i]) / 
			       (10 ** ($j-1))) % 10;
	    }
	}
	if (defined $$arrRef[$i]) {
	    if ($$arrRef[$i] >= 0) { $strip[0] .= "+"; }
	    else { $strip[0] .= "-"; }
	} else { $strip[0] .= " "; }
    }
    if ($neg == 0) {
	if ($caption =~ /\w/) { $strip[1] .= " : $caption"; }
	for ($j = $units; $j > 0; $j--) {
	    print "$string:$strip[$j]\n";
	}
    } else {
	if ($caption =~ /\w/) { $strip[0] .= " : $caption"; }
	print "$string:$strip[0]\n";
	for ($j = $units; $j > 0; $j--) {
	    print "$string:$strip[$j]\n";
	}
    }
    undef @strip;
}

sub NUMERICALLY { $a <=> $b; }
